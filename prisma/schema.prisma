generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String                @id @default(cuid())
  twitterUsername String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  email           String                @unique
  emailVerified   DateTime?
  image           String?
  name            String?
  password        String
  accounts        Account[]
  channels        NotificationChannel[]
  notifications   Notification[]
  sessions        Session[]
  rules           TrackingRule[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model TrackingRule {
  id              String    @id @default(cuid())
  userId          String
  name            String
  description     String
  criteria        String
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  twitterUsername String
  lastPolledAt    DateTime?
  pollingEnabled  Boolean   @default(true)
  pollingInterval Int       @default(300)
  user            User      @relation(fields: [userId], references: [id])
  tweets          Tweet[]

  @@map("tracking_rules")
}

model Tweet {
  id            String         @id @default(cuid())
  tweetId       String         @unique
  authorId      String
  content       String
  createdAt     DateTime       @default(now())
  matchedRuleId String
  notifications Notification[]
  analysis      TweetAnalysis?
  rule          TrackingRule   @relation(fields: [matchedRuleId], references: [id])

  @@map("tweets")
}

model TweetAnalysis {
  id             String   @id @default(cuid())
  tweetId        String   @unique
  relevanceScore Float
  analysisResult String
  createdAt      DateTime @default(now())
  tweet          Tweet    @relation(fields: [tweetId], references: [id])

  @@map("tweet_analyses")
}

model NotificationChannel {
  id            String         @id @default(cuid())
  userId        String
  type          String
  config        Json
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id])
  notifications Notification[]

  @@map("notification_channels")
}

model Notification {
  id        String              @id @default(cuid())
  userId    String
  channelId String
  tweetId   String
  status    String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  channel   NotificationChannel @relation(fields: [channelId], references: [id])
  tweet     Tweet               @relation(fields: [tweetId], references: [id])
  user      User                @relation(fields: [userId], references: [id])

  @@map("notifications")
}
